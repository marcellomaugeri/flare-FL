from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidateModelPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model=None, weights=None):  # noqa: E501
        """ValidateModelPostRequest - a model defined in OpenAPI

        :param model: The model of this ValidateModelPostRequest.  # noqa: E501
        :type model: str
        :param weights: The weights of this ValidateModelPostRequest.  # noqa: E501
        :type weights: str
        """
        self.openapi_types = {
            'model': str,
            'weights': str
        }

        self.attribute_map = {
            'model': 'model',
            'weights': 'weights'
        }

        self._model = model
        self._weights = weights

    @classmethod
    def from_dict(cls, dikt) -> 'ValidateModelPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _validate_model_post_request of this ValidateModelPostRequest.  # noqa: E501
        :rtype: ValidateModelPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self) -> str:
        """Gets the model of this ValidateModelPostRequest.

        The model architecture  # noqa: E501

        :return: The model of this ValidateModelPostRequest.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this ValidateModelPostRequest.

        The model architecture  # noqa: E501

        :param model: The model of this ValidateModelPostRequest.
        :type model: str
        """
        allowed_values = ["cifar10"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def weights(self) -> str:
        """Gets the weights of this ValidateModelPostRequest.

        The model weights as a base64 encoded string  # noqa: E501

        :return: The weights of this ValidateModelPostRequest.
        :rtype: str
        """
        return self._weights

    @weights.setter
    def weights(self, weights: str):
        """Sets the weights of this ValidateModelPostRequest.

        The model weights as a base64 encoded string  # noqa: E501

        :param weights: The weights of this ValidateModelPostRequest.
        :type weights: str
        """
        if weights is None:
            raise ValueError("Invalid value for `weights`, must not be `None`")  # noqa: E501

        self._weights = weights
