from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateModelPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_id=None, hex_weights=None):  # noqa: E501
        """UpdateModelPostRequest - a model defined in OpenAPI

        :param model_id: The model_id of this UpdateModelPostRequest.  # noqa: E501
        :type model_id: str
        :param hex_weights: The hex_weights of this UpdateModelPostRequest.  # noqa: E501
        :type hex_weights: str
        """
        self.openapi_types = {
            'model_id': str,
            'hex_weights': str
        }

        self.attribute_map = {
            'model_id': 'model_id',
            'hex_weights': 'hex_weights'
        }

        self._model_id = model_id
        self._hex_weights = hex_weights

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateModelPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _update_model_post_request of this UpdateModelPostRequest.  # noqa: E501
        :rtype: UpdateModelPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self) -> str:
        """Gets the model_id of this UpdateModelPostRequest.


        :return: The model_id of this UpdateModelPostRequest.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the model_id of this UpdateModelPostRequest.


        :param model_id: The model_id of this UpdateModelPostRequest.
        :type model_id: str
        """
        allowed_values = ["cifar10"]  # noqa: E501
        if model_id not in allowed_values:
            raise ValueError(
                "Invalid value for `model_id` ({0}), must be one of {1}"
                .format(model_id, allowed_values)
            )

        self._model_id = model_id

    @property
    def hex_weights(self) -> str:
        """Gets the hex_weights of this UpdateModelPostRequest.


        :return: The hex_weights of this UpdateModelPostRequest.
        :rtype: str
        """
        return self._hex_weights

    @hex_weights.setter
    def hex_weights(self, hex_weights: str):
        """Sets the hex_weights of this UpdateModelPostRequest.


        :param hex_weights: The hex_weights of this UpdateModelPostRequest.
        :type hex_weights: str
        """
        if hex_weights is None:
            raise ValueError("Invalid value for `hex_weights`, must not be `None`")  # noqa: E501

        self._hex_weights = hex_weights
