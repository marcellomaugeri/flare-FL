from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateModelFromFilePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_id=None, file_path=None):  # noqa: E501
        """UpdateModelFromFilePostRequest - a model defined in OpenAPI

        :param model_id: The model_id of this UpdateModelFromFilePostRequest.  # noqa: E501
        :type model_id: str
        :param file_path: The file_path of this UpdateModelFromFilePostRequest.  # noqa: E501
        :type file_path: str
        """
        self.openapi_types = {
            'model_id': str,
            'file_path': str
        }

        self.attribute_map = {
            'model_id': 'model_id',
            'file_path': 'file_path'
        }

        self._model_id = model_id
        self._file_path = file_path

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateModelFromFilePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _update_model_from_file_post_request of this UpdateModelFromFilePostRequest.  # noqa: E501
        :rtype: UpdateModelFromFilePostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self) -> str:
        """Gets the model_id of this UpdateModelFromFilePostRequest.


        :return: The model_id of this UpdateModelFromFilePostRequest.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the model_id of this UpdateModelFromFilePostRequest.


        :param model_id: The model_id of this UpdateModelFromFilePostRequest.
        :type model_id: str
        """
        allowed_values = ["cifar10"]  # noqa: E501
        if model_id not in allowed_values:
            raise ValueError(
                "Invalid value for `model_id` ({0}), must be one of {1}"
                .format(model_id, allowed_values)
            )

        self._model_id = model_id

    @property
    def file_path(self) -> str:
        """Gets the file_path of this UpdateModelFromFilePostRequest.


        :return: The file_path of this UpdateModelFromFilePostRequest.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path: str):
        """Sets the file_path of this UpdateModelFromFilePostRequest.


        :param file_path: The file_path of this UpdateModelFromFilePostRequest.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path
